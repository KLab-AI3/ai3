#!/usr/bin/env python

import subprocess
import os
from pathlib import Path
import pybind11
import argparse

PY = "python -m"
PIP = "pip"
C_FORMAT = "clang-format"
PY_FORMAT = "autopep8"

TEST_MOD = "test"
UNIT_TEST_MOD = TEST_MOD + ".unit"
INTEGRATION_TEST_MOD = TEST_MOD + '.integration'
BENCH_MOD = "bench"
LAYER_BENCH_MOD = BENCH_MOD + ".layers"
MODEL_BENCH_MOD = BENCH_MOD + ".models"

CSRC_FILES = [str(f) for f in Path('.').rglob('*') if f.suffix in ['.cpp', '.hpp'] and 'venv' not in f.parts]
PY_FILES = [str(f) for f in Path('.').rglob('*.py') if 'venv' not in f.parts]

def run_command(command):
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print("Error:", e)
        exit(1)

def gen_clangd(file_path):
    flags = [
        '-Wall',
        '-Wextra',
        '-Werror',
        '-std=c++17',
        '-I' +
        os.path.join(os.path.dirname(pybind11.__file__), 'include'),
        *subprocess.check_output(
            ['python3-config', '--include']).decode().strip().split()
        ]
    with open(file_path, 'w') as f:
        f.write('CompileFlags:\n')
        f.write('  Add:\n')
        for flag in flags:
            f.write(f'    - "{flag}"\n')

def format_files():
    run_command(f"{C_FORMAT} -i {' '.join(CSRC_FILES)}")
    run_command(f"{PY_FORMAT} --in-place {' '.join(PY_FILES)}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run various development commands")
    parser.add_argument("commands", nargs='+')
    args = parser.parse_args()

    for cmd in args.commands:
        if cmd == "gen_clangd":
            gen_clangd('.clangd')
        elif cmd == "ext":
            run_command(f"{PIP} install .")
        elif cmd == "ext_e":
            run_command(f"{PIP} install --editable .")
        elif cmd == "ext_ev":
            run_command(f"{PIP} install --editable . -vvv")
        elif cmd.startswith("bench"):
            run_command(f"{PY} {cmd}")
        elif cmd.startswith("lbench"):
            updated_command = cmd.replace("lbench", LAYER_BENCH_MOD, 1)
            run_command(f"{PY} {updated_command}")
        elif cmd.startswith("mbench"):
            updated_command = cmd.replace("mbench", MODEL_BENCH_MOD, 1)
            run_command(f"{PY} {updated_command}")
        elif cmd.startswith("test"):
            run_command(f"{PY} {cmd}")
        elif cmd.startswith("utest"):
            updated_command = cmd.replace("utest", UNIT_TEST_MOD, 1)
            run_command(f"{PY} {updated_command}")
        elif cmd.startswith("itest"):
            updated_command = cmd.replace("itest", INTEGRATION_TEST_MOD, 1)
            run_command(f"{PY} {updated_command}")
        elif cmd == "format":
            format_files()
        else:
            print(f'Error: unsupported command: {cmd}')
