#!/usr/bin/env python3.11

import subprocess
import os
from pathlib import Path
import argparse
import runners
import bench.layers
import test.swap_conv2d
import test.swap_backend
import test.unit
import bench.swap_conv2d
import bench.swap_backend


PY = "python3.11 -m"
PIP = "pip3.11"
C_FORMAT = "clang-format"
PY_FORMAT = "autopep8"

TEST_MOD = "test"
EXAMPLE_MOD = "example"
UNIT_TEST_MOD = TEST_MOD + ".unit"
BENCH_MOD = "bench"
LAYER_BENCH_MOD = BENCH_MOD + ".layers"

CSRC_FILES = [str(f) for f in Path('.').rglob('*') if f.suffix in ['.cpp', '.hpp'] and 'venv' not in f.parts]
PY_FILES = [str(f) for f in Path('.').rglob('*.py') if 'venv' not in f.parts]


def run_command(command):
    print(f'Running: {command}')
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print("Error:", e)
        exit(1)

def gen_clangd(file_path):
    import pybind11
    flags = [
        '-Wall',
        '-Wextra',
        '-Werror',
        '-std=c++17',
        '-I' +
        os.path.join(os.path.dirname(pybind11.__file__), 'include'),
        *subprocess.check_output(
            ['python3-config', '--include']).decode().strip().split()
        ]
    with open(file_path, 'w') as f:
        f.write('CompileFlags:\n')
        f.write('  Add:\n')
        for flag in flags:
            f.write(f'    - "{flag}"\n')

def build(editable: bool = False, verbose: bool = False, dev: bool = False):
    cxx_flags = ""
    cmd = f"{PIP} install"
    if editable:
        cmd += " --editable"
    cmd += " ."
    if dev:
        cmd += "[dev]"
    if verbose:
        cmd += " --verbose"
    if cxx_flags:
        cmd += f" --config-settings=cmake.define.CMAKE_CXX_FLAGS=\'{cxx_flags}\'"
    run_command(cmd)

def test_all():
    test_swap_conv2d("")
    test_swap_backend("")
    test.unit.run()

def bench_all():
    bench_swap_conv2d("")
    bench_swap_backend("")
    bench.layers.run()

def test_swap_conv2d(name):
    runners.run_on(test.swap_conv2d.runner, name)

def test_swap_backend(name):
    runners.run_on(test.swap_backend.runner, name)

def bench_swap_conv2d(name):
    runners.run_on(bench.swap_conv2d.runner, name)

def bench_swap_backend(name):
    runners.run_on(bench.swap_backend.runner, name)

def starts_with_any(cmd, starts):
    return any(cmd.startswith(s) for s in starts)

def clean_start(cmd, starts):
    for s in starts:
        if cmd.startswith(s):
            return cmd[len(s) + 1:]
    assert False and "cleaning with unmatched start"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run various development commands")
    parser.add_argument("commands", nargs='+')
    args = parser.parse_args()

    for cmd in args.commands:
        if cmd == "gen_clangd":
            gen_clangd('.clangd')
        elif cmd == "install":
            build()
        elif cmd == "install_e":
            build(editable=True)
        elif cmd == "install_ev":
            build(editable=True, verbose=True)
        elif cmd == "install_d":
            build(dev=True)
        elif cmd == TEST_MOD:
            test_all()
        elif cmd.startswith(EXAMPLE_MOD):
            run_command(f"{PY} {cmd}")
        elif starts_with_any(cmd, ["utest", "test.unit"]):
            updated_command = cmd.replace("utest", UNIT_TEST_MOD, 1)
            run_command(f"{PY} {updated_command}")
        elif cmd == BENCH_MOD:
            bench_all()
        elif cmd.startswith("lbench"):
            updated_command = cmd.replace("lbench", LAYER_BENCH_MOD, 1)
            run_command(f"{PY} {updated_command}")
        elif starts_with_any(cmd, ["scbench", "bench.swap_conv2d"]):
            bench_swap_conv2d(clean_start(cmd, ["scbench", "bench.swap_conv2d"]))
        elif starts_with_any(cmd, ["sbbench", "bench.swap_backend"]):
            bench_swap_backend(clean_start(cmd, ["sbbench", "bench.swap_backend"]))
        elif starts_with_any(cmd, ["sctest", "test.swap_conv2d"]):
            test_swap_conv2d(clean_start(cmd, ["sctest", "test.swap_conv2d"]))
        elif starts_with_any(cmd, ["sbtest", "test.swap_backend"]):
            test_swap_backend(clean_start(cmd, ["sbtest", "test.swap_backend"]))
        elif cmd == "format":
            run_command(f"{C_FORMAT} -i {' '.join(CSRC_FILES)}")
            run_command(f"{PY_FORMAT} --in-place {' '.join(PY_FILES)}")
        else:
            print(f'Error: unsupported command: {cmd}')
            exit(1)
